
# Advanced Shell and System Call Management in xv6

**Project Overview:**  
This project extends the **xv6 Operating System (version 11)** by implementing an advanced shell with secure login, process tracking, system call control, and file permission management. The project demonstrates a hands-on understanding of **Operating System concepts** such as **kernel programming, system calls, process management, memory utilization, and file permissions**.

---

## Features Implemented (According to Assignment)

### 1. Secure Login System 
- Added username/password-based authentication for the shell.  
- Username and password are defined as macros in the `Makefile`.  
- User gets **maximum 3 attempts**; shell access is denied after 3 failed tries.  
- Password is requested only if the correct username is entered.  
- Login prompts:


$ Enter Username:
$ Enter Password:
Login successful
$


---

### 2. `history` Command
- Displays all executed processes in ascending order of time.  
- Each process entry includes:
  - **PID**
  - **Process Name**
  - **Total Memory Utilization** (text, bss, data, stack, heap segments)  
- Implemented using a new system call:  
```c
int sys_gethistory(); // syscall ID 22


Example:

$ history
PID   Process Name   Memory (bytes)
1     init           4096
2     sh             2048
3     ls             1024

3. block and unblock Commands 

Dynamically block/unblock specific system calls for all processes spawned by the current shell.

Critical system calls fork and exit cannot be blocked.

Implemented using two new system calls:

int sys_block(int syscall_id);   // syscall ID 23
int sys_unblock(int syscall_id); // syscall ID 24


User-level commands usage:

$ block 7       // Blocks syscall with ID 7 (e.g., SYS_exec)
$ unblock 7     // Unblocks syscall with ID 7


When a blocked syscall is invoked, the shell prints:

syscall 7 is blocked

4. chmod Command 

Modify file permissions using a 3-bit integer mode:

Bit 0: Read permission

Bit 1: Write permission

Bit 2: Execute permission

System call implemented:

int sys_chmod(const char* file, int mode); // syscall ID 25


If a restricted operation is attempted, the shell prints:

Operation <op> failed


Example usage:

$ chmod file.txt 5   // Sets read & execute permissions


Enforced permissions on system calls: open, write, exec.

System Calls Added
System Call	ID	Description
sys_gethistory	22	Return executed process history
sys_block	23	Block a system call dynamically
sys_unblock	24	Unblock a system call
sys_chmod	25	Modify file permissions
Installation Instructions

Clone the repository

git clone https://github.com/<username>/Advanced-Shell-and-System-Call-Management-in-xv6.git
cd Advanced-Shell-and-System-Call-Management-in-xv6


Build xv6 and Run in QEMU

make clean
make
make qemu


Login

$ Enter Username:
$ Enter Password:
Login successful
$

Usage Examples
$ history
$ block 7
$ unblock 7
$ chmod file.txt 5

Project Scope & Learning Outcomes

Implemented kernel-level system call management.

Designed a secure shell with authentication.

Built process tracking with memory utilization.

Implemented file permission enforcement at the OS level.

Developed understanding of xv6 kernel internals, processes, system calls, and memory layout.

Report

Detailed methodology, code snippets, and pseudocode are available in report.pdf.

Optional Diagram / Architecture

(Illustrate Shell ↔ System Calls ↔ Kernel ↔ Processes interaction here)

License

MIT License. See LICENSE for details.
